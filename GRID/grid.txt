CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, 
compared to any web layout system of the past, completely changes the way we design user interfaces.

# apply to the parent container
display: grid | inline-grid;
# sets the gap between the columns
column-gap: 50px;
# sets the gap between the rows
row-gap: 50px;
# shorthand property for the row-gap and the column-gap
gap: 50px 100px;
gap: 50px; # apply to both
# horizontally align the whole grid inside the container, its total width has to be < the container's width for the justify-content property to have any effect.
justify-content: space-evenly | space-around | space-between | center | start | end;
# vertically align the whole grid inside the container
align-content: space-evenly | space-around | space-between | center | start | end;
# Aligns a grid item inside a cell along the inline (row) axis
justify-self: start | end | center | stretch;
.item-a {
  justify-self: start;
}
# Aligns a grid item inside a cell along the (column) axis
align-self: start | end | center | stretch;
.item-a {
  align-self: start;
}
# shorthand for <align-self> / <justify-self>
place-self:center;
place-self: center stretch;
# The lines between columns are called column lines. The lines between rows are called row lines.
# grid item at column line 1, and let it end on column line 3
<number> | <name> | span <number> | span <name> | auto;
grid-column-start: 1;
grid-column-end: 3;
grid-row-start: 1;
grid-row-end: 3;
# defines on which column(s) to place an item, and where the item will start, and where the item will end.
# shorthand property for grid-column-start | grid-column-end
grid-column: <start-line> / <end-line> | <start-line> / span <value>;
grid-row: <start-line> / <end-line> | <start-line> / span <value>;
grid-column: 1/5;
grid-column: 1 / span 3;
# shorthand property for grid-row-start | grid-row-end
grid-row: 1 / 4;
grid-row: 1 / span 2;
# shorthand property for the grid<row-start> / <column-start> / <row-end> / <column-end> – can be numbers or named lines
grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;
grid-area: 1 / 2 / 5 / 6; # start on row-line 1 and column-line 2, and end on row-line 5 and column line 6
grid-area: 2 / 1 / span 2 / span 3;
# defines the number of columns in your grid layout, and it can define the width of each column.
 grid-template-columns: ...  ...; 
      auto auto auto auto; # all with the same size
      1fr 1fr
      minmax(10px, 1fr) 3fr
      repeat(5, 1fr)
      50px auto 100px 1fr
  grid-template-rows: ... ...;
      min-content 1fr min-content
      100px 1fr max-content
      80px 200px

# also is used to assign names to grid items
grid-area: myArea;
grid-template-areas: 'myArea myArea myArea myArea myArea';
grid-template-areas: 'myArea myArea . . .'; # (period signs represent items with no name)
grid-template-areas: 'myArea myArea . . .' 'myArea myArea . . .'; # span two columns and two rows
# shothand
grid-template: none | <grid-template-rows> / <grid-template-columns>;
.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }
.grid-container {
  grid-template-areas:
    'header header header header header header'
    'menu main main main right right'
    'menu footer footer footer footer footer';
}
# position the items 
.item1 { grid-area: 1 / 3 / 2 / 4; }
.item2 { grid-area: 2 / 3 / 3 / 4; }
.item3 { grid-area: 1 / 1 / 2 / 2; }
.item4 { grid-area: 1 / 2 / 2 / 3; }
.item5 { grid-area: 2 / 1 / 3 / 2; }
.item6 { grid-area: 2 / 2 / 3 / 3; }


* Special Units & Functions: fr units (refers to portions of the remaining space)
grid-template-columns: 1fr 3fr; (25% 75%)
* Sizing Keywords:
min-content: the minimum size of the content. Imagine a line of text like “E pluribus unum”, the min-content is likely the width of the word “pluribus”.
max-content: the maximum size of the content. Imagine the sentence above, the max-content is the length of the whole sentence.
auto: this keyword is a lot like fr units, except that they “lose” the fight in sizing against fr units when allocating the remaining space.
fit-content: use the space available, but never less than min-content and never more than max-content.
* Sizing Functions: it sets a minimum and maximum value for what the length is able to be.
grid-template-columns: minmax(100px, 1fr) 3fr;
min() and max() functions
* repeat() function & keywords
instead of ==> 
grid-template-columns:
  1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
/* easier: */
grid-template-columns:
  repeat(8, 1fr);
/* especially when: */
grid-template-columns:
  repeat(8, minmax(10px, 1fr));
# To achieve wrapping, we can use the auto-fit or auto-fill keywords when we have a narrow viewport
auto-fill: Fit as many possible columns as possible on a row, even if they are empty.
auto-fit: Fit whatever columns there are into the space. Prefer expanding columns to fill space rather than empty columns.

grid-template-columns: 
  repeat(auto-fit, minmax(250px, 1fr));

